<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<templates>
    <!-- Template para crear una clase importadora de datos XML a base de datos -->
    <template autoinsert="true" context="java" deleted="false" description="Crear una clase importadora de XML a base de datos" enabled="true" name="xmlImporter">
package ${paquete};

import java.io.File;
import java.sql.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.*;

public class Importador${Entidad}XML {

    public static void main(String[] args) {
        String url = "${jdbc_url}";
        String user = "${jdbc_user}";
        String password = "${jdbc_password}";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            File file = new File("${ruta_archivo}");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file);
            doc.getDocumentElement().normalize();

            ${metodos_insercion}

            System.out.println("Datos insertados correctamente desde ${archivo}");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    ${metodos_definicion}
}
    </template>
    
    <!-- Template para crear un método de inserción desde XML -->
    <template autoinsert="true" context="java" deleted="false" description="Crear método para insertar datos desde XML" enabled="true" name="xmlInsertMethod">
private static void insertar${Entidades}(Document doc, Connection conn) throws SQLException {
    NodeList lista = doc.getElementsByTagName("${entidad}");
    String sql = "INSERT INTO ${tabla} (${columnas}) VALUES (${placeholders})";
    PreparedStatement ps = conn.prepareStatement(sql);
    for (int i = 0; i &lt; lista.getLength(); i++) {
        Element e = (Element) lista.item(i);
        ${preparar_parametros}
        ps.executeUpdate();
    }
}
    </template>
    
    <!-- Template para extraer un valor entero de un elemento XML -->
    <template autoinsert="true" context="java" deleted="false" description="Extraer valor entero de un elemento XML" enabled="true" name="xmlGetInt">
ps.setInt(${index}, Integer.parseInt(e.getElementsByTagName("${elemento}").item(0).getTextContent()));
    </template>
    
    <!-- Template para extraer un valor String de un elemento XML -->
    <template autoinsert="true" context="java" deleted="false" description="Extraer valor String de un elemento XML" enabled="true" name="xmlGetString">
ps.setString(${index}, e.getElementsByTagName("${elemento}").item(0).getTextContent());
    </template>
    
    <!-- Template para extraer un valor Date de un elemento XML -->
    <template autoinsert="true" context="java" deleted="false" description="Extraer valor Date de un elemento XML" enabled="true" name="xmlGetDate">
ps.setDate(${index}, Date.valueOf(e.getElementsByTagName("${elemento}").item(0).getTextContent()));
    </template>
    
    <!-- Template para extraer un valor Boolean de un elemento XML -->
    <template autoinsert="true" context="java" deleted="false" description="Extraer valor Boolean de un elemento XML" enabled="true" name="xmlGetBoolean">
ps.setBoolean(${index}, Boolean.parseBoolean(e.getElementsByTagName("${elemento}").item(0).getTextContent()));
    </template>
    
    <!-- Template para una clase completa de importación XML específica para la librería -->
    <template autoinsert="true" context="java" deleted="false" description="Crear una clase importadora de XML completa para la librería" enabled="true" name="libreriaXmlImporter">
package ${paquete};

import java.io.File;
import java.sql.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.*;

public class ImportadorLibreriaXML {

    public static void main(String[] args) {
        String url = "jdbc:mariadb://localhost:3306/libreria";
        String user = "root";
        String password = "";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            File file = new File("resources/libreria.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file);
            doc.getDocumentElement().normalize();

            insertarGeneros(doc, conn);
            insertarAutores(doc, conn);
            insertarLibros(doc, conn);
            insertarPrestamos(doc, conn);

            System.out.println("Datos insertados correctamente desde libreria.xml");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void insertarGeneros(Document doc, Connection conn) throws SQLException {
        NodeList lista = doc.getElementsByTagName("genero");
        String sql = "INSERT INTO genero (id_genero, nombre_genero) VALUES (?, ?)";
        PreparedStatement ps = conn.prepareStatement(sql);
        for (int i = 0; i &lt; lista.getLength(); i++) {
            Element e = (Element) lista.item(i);
            ps.setInt(1, Integer.parseInt(e.getElementsByTagName("id_genero").item(0).getTextContent()));
            ps.setString(2, e.getElementsByTagName("nombre_genero").item(0).getTextContent());
            ps.executeUpdate();
        }
    }

    private static void insertarAutores(Document doc, Connection conn) throws SQLException {
        NodeList lista = doc.getElementsByTagName("autor");
        String sql = "INSERT INTO autor (id_autor, nombre_autor, nacionalidad) VALUES (?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(sql);
        for (int i = 0; i &lt; lista.getLength(); i++) {
            Element e = (Element) lista.item(i);
            ps.setInt(1, Integer.parseInt(e.getElementsByTagName("id_autor").item(0).getTextContent()));
            ps.setString(2, e.getElementsByTagName("nombre_autor").item(0).getTextContent());
            ps.setString(3, e.getElementsByTagName("nacionalidad").item(0).getTextContent());
            ps.executeUpdate();
        }
    }

    private static void insertarLibros(Document doc, Connection conn) throws SQLException {
        NodeList lista = doc.getElementsByTagName("libro");
        String sql = "INSERT INTO libro (id_libro, titulo, anio_publicacion, id_autor, id_genero) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(sql);
        for (int i = 0; i &lt; lista.getLength(); i++) {
            Element e = (Element) lista.item(i);
            ps.setInt(1, Integer.parseInt(e.getElementsByTagName("id_libro").item(0).getTextContent()));
            ps.setString(2, e.getElementsByTagName("titulo").item(0).getTextContent());
            ps.setInt(3, Integer.parseInt(e.getElementsByTagName("anio_publicacion").item(0).getTextContent()));
            ps.setInt(4, Integer.parseInt(e.getElementsByTagName("id_autor").item(0).getTextContent()));
            ps.setInt(5, Integer.parseInt(e.getElementsByTagName("id_genero").item(0).getTextContent()));
            ps.executeUpdate();
        }
    }

    private static void insertarPrestamos(Document doc, Connection conn) throws SQLException {
        NodeList lista = doc.getElementsByTagName("prestamo");
        String sql = "INSERT INTO prestamo (id_libro, fecha_prestamo, devuelto) VALUES (?, ?, ?)";
        PreparedStatement ps = conn.prepareStatement(sql);
        for (int i = 0; i &lt; lista.getLength(); i++) {
            Element e = (Element) lista.item(i);
            ps.setInt(1, Integer.parseInt(e.getElementsByTagName("id_libro").item(0).getTextContent()));
            ps.setDate(2, Date.valueOf(e.getElementsByTagName("fecha_prestamo").item(0).getTextContent()));
            ps.setBoolean(3, Boolean.parseBoolean(e.getElementsByTagName("devuelto").item(0).getTextContent()));
            ps.executeUpdate();
        }
    }
}
    </template>
    
    <!-- Template para crear un nuevo método de extracción de datos XML -->
    <template autoinsert="true" context="java" deleted="false" description="Crear un método para extraer y validar datos XML" enabled="true" name="xmlExtractData">
private static ${tipo} extraer${Tipo}(Element elemento, String tagName, ${tipo} valorPorDefecto) {
    NodeList nodos = elemento.getElementsByTagName(tagName);
    if (nodos.getLength() > 0) {
        String contenido = nodos.item(0).getTextContent();
        try {
            return ${conversion};
        } catch (Exception e) {
            System.err.println("Error al convertir " + tagName + ": " + e.getMessage());
            return valorPorDefecto;
        }
    }
    return valorPorDefecto;
}
    </template>
    
    <!-- Template para crear una estructura XML de ejemplo -->
    <template autoinsert="true" context="xml" deleted="false" description="Crear una estructura XML para librería" enabled="true" name="xmlLibreriaStructure">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<libreria>
    <generos>
        <genero>
            <id_genero>${id_genero}</id_genero>
            <nombre_genero>${nombre_genero}</nombre_genero>
        </genero>
        <!-- Más géneros aquí -->
    </generos>
    
    <autores>
        <autor>
            <id_autor>${id_autor}</id_autor>
            <nombre_autor>${nombre_autor}</nombre_autor>
            <nacionalidad>${nacionalidad}</nacionalidad>
        </autor>
        <!-- Más autores aquí -->
    </autores>
    
    <libros>
        <libro>
            <id_libro>${id_libro}</id_libro>
            <titulo>${titulo}</titulo>
            <anio_publicacion>${anio}</anio_publicacion>
            <id_autor>${ref_id_autor}</id_autor>
            <id_genero>${ref_id_genero}</id_genero>
        </libro>
        <!-- Más libros aquí -->
    </libros>
    
    <prestamos>
        <prestamo>
            <id_libro>${ref_id_libro}</id_libro>
            <fecha_prestamo>${fecha}</fecha_prestamo>
            <devuelto>${devuelto}</devuelto>
        </prestamo>
        <!-- Más préstamos aquí -->
    </prestamos>
</libreria>
    </template>
</templates>